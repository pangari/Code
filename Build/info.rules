ifndef INFO_RULE_INCLUDED
INFO_RULE_INCLUDED=1

help:
	@printf " \n"
	@printf "  Standard usage \n"
	@printf " ---------------- \n"
	@printf "   make CONF=$(if $(findstring release,$(CONF)),{<release>|debug},{<debug>|release}) COMPILER=$(if $(findstring clang,$(COMPILER)),{<clang>|gcc740|gcc910},$(if $(findstring gcc740,$(COMPILER)),{clang|<gcc740>|gcc910},{clang|gcc740|<gcc910>})) ARCH=$(if $(findstring x86_64,$(ARCH)),{<x86_64>|i686},{<i686>|x86_64}) PIC=$(if $(findstring 1,$(PIC)),{<1>|0},{<0>|1}) \n"
	@printf " \n"
	@printf "  Extra boolean variables (usage is {name}=1, default is {name}=0) \n"
	@printf " ---------------- \n"
	@printf "   DEPEND - Build all dependant libraries as well (use 1 to enable)\n"
	@printf " \n"
	@printf "  Environment variables \n"
	@printf " ----------------------- \n"
	@printf "   BUILDROOT - Root location for all compiler output (dependency files, object files, static/shared libraries and applications) \n"
	@printf " \n"
	@printf "  Common MAKE targets \n"
	@printf " --------------------- \n"
	@printf "   make help \n"
	@printf "     Describe options, targets and variables used by MAKE \n"
	@printf " \n"
	@printf "   make info \n"
	@printf "     Show detailed build information (using current build options) \n"
	@printf " \n"
	@printf "   make clean \n"
	@printf "     Delete output binary and object files \n"
	@printf " \n"
	@printf "   make clean_branch \n"
	@printf "     Remove entire build root for current branch (forces a complete rebuild of current branch) \n"
	@printf " \n"
	@printf "   make clean_ccache \n"
	@printf "     Remove entire ccahe root (forces all object files to be re-created) \n"
	@printf " \n"
	@printf "   make srclist \n"
	@printf "     Show list of source files for current Makefile \n"
	@printf " \n"
	@printf "   make objlist \n"
	@printf "     Show list of object files for current Makefile \n"
	@printf " \n"
	@printf "   make target \n"
	@printf "     Print path of output binary (application or library depending on Makefile) \n"
	@printf " \n"
	@printf "  Additional MAKE targets for applications \n"
	@printf " ------------------------------------------ \n"
	@printf "   make gzip \n"
	@printf "     gzip -9 -c {TARGET} > {TARGET}.gz \n"
	@printf " \n"
	@printf "   make gdb OPTIONS={?} \n"
	@printf "     $(GDB) {TARGET} <OPTIONS> \n"
	@printf " \n"

info:
	@printf " ----------------------------------------------------------------------------------------------------------\n"
	@printf "  System Name                  - $(OS)\n"
	@printf "  Architecture                 - $(call if64,Intel 64-bit,Intel 32-bit)\n"
	@printf "  Compiler Version             - $(COMPILER)\n"
	@printf "  Build Type                   - $(call ifrelease,Optimized Build,Debug Build)\n"
	@printf "  Configuration Tag            - $(TAG)\n"
	@printf " ----------------------------------------------------------------------------------------------------------\n"
	@printf "  System Path                  - $(PATH)\n"
	@printf "  Cached compiler output Path  - $(CCACHE_DIR)\n"
	@printf " ----------------------------------------------------------------------------------------------------------\n"
	@printf "  C Compiler                   - $(CC) [$(CC_EXISTS)]\n"
	@printf "  C++ Compiler                 - $(CXX) [$(CXX_EXISTS)]\n"
	@printf "  Linker                       - $(LD) [$(LD_EXISTS)]\n"
	@printf "  Archiver                     - $(AR) [$(AR_EXISTS)]\n"
	@printf "  Archive Indexer              - $(RANLIB) [$(RANLIB_EXISTS)]\n"
	@printf "  GNU Debugger                 - $(GDB) [$(GDB_EXISTS)]\n"
	@printf " ----------------------------------------------------------------------------------------------------------\n"
	@printf "  Workspace Root               $(WORKROOT) [$(if $(findstring true,$(WORKROOT_CALCULATED)),CALCULATED,DEFINED)]\n"
	@printf "  Build Root                   $(BUILDROOT_CONF)\n"
	@printf "  Intermediate File Root       $(OUTDIR)\n"
	@printf "  Library Output Path          $(LIBDIR)\n"
	@printf "  Target Output Filename       $(REAL_TARGET)\n"
	@printf "  Local symlink dir            $(LOCAL_OUTDIR)\n"
	@printf " ----------------------------------------------------------------------------------------------------------\n"

endif
